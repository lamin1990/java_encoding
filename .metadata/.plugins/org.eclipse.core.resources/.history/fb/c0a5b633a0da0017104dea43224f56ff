import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.GridLayout;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.image.BufferedImage;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.List;
import java.util.Scanner;

import javax.imageio.ImageIO;
import javax.swing.*;


public class Mysplitpane extends JPanel {
	
	//Declare variables
	static JSplitPane splitPane;
	private JTextArea textarea;
	private JScrollPane scroll;
	private JScrollPane rightscroll;
	static JPanel diagram = new JPanel();
	static JPanel gpanel = new JPanel();
	static JPanel rightScrollContentPanel = new JPanel();
	static JPanel radioBtnsPanel = new JPanel();
	
	static String[] dataParts = null;
	static float[] chartData;
	static String lineValue;
	
	static float xStart, xInterval;
	
	static String chartTitle;
	static String xLabel;
	static String yLabel;
	
	ButtonGroup ChartTypesBtnGroup; 
	JRadioButton LineChartTypeBtn, BarChartTypeBtn;
	
	final String LINE_CHART_LABEL = "Show Line Chart";
	final String BAR_CHART_LABEL = "Show Bar Chart";
	String SelectedChartType = LINE_CHART_LABEL;
	
	private boolean chartLoaded;
	
	// constructor
	public  Mysplitpane() {
	
		gpanel.setBackground(Color.WHITE);
		
		textarea = new JTextArea(100, 50);
		
		scroll = new JScrollPane(textarea);
		// setup chart type radio buttons
		InitializeChartTypeSelectors();
		
		rightScrollContentPanel.setLayout(new BorderLayout());
		rightScrollContentPanel.setBackground(Color.WHITE);
		rightScrollContentPanel.setOpaque(false);
		
		radioBtnsPanel.setPreferredSize(new Dimension(20, 10));
		radioBtnsPanel.setBackground(Color.WHITE);
		radioBtnsPanel.setOpaque(false);
		
		radioBtnsPanel.setLayout(new GridLayout(1, 2));
		radioBtnsPanel.add(LineChartTypeBtn);
		radioBtnsPanel.add(BarChartTypeBtn);
		
		rightScrollContentPanel.add(radioBtnsPanel, BorderLayout.CENTER);
		
		rightScrollContentPanel.add(gpanel, BorderLayout.SOUTH);
		
		rightscroll = new JScrollPane(rightScrollContentPanel);
		
		//scroll.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);
		
		rightscroll.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
		
		splitPane = new JSplitPane(JSplitPane.HORIZONTAL_SPLIT, scroll, rightscroll );
	
	
		splitPane.setOneTouchExpandable(true);
		splitPane.setDividerLocation(250);
		//Allow or disallow editing
		textarea.setEditable(false);
		
		chartLoaded = false;
	}
	
	private void InitializeChartTypeSelectors() {
		
		ChartTypesBtnGroup = new ButtonGroup();
		LineChartTypeBtn = new JRadioButton(LINE_CHART_LABEL);
		BarChartTypeBtn = new JRadioButton(BAR_CHART_LABEL);
		
		LineChartTypeBtn.addItemListener(new ItemListener() {
			
			@Override
			public void itemStateChanged(ItemEvent e) {
				// the state of the radio button has changed
				// let's re-draw the graph
				if(e.getStateChange() == ItemEvent.SELECTED) {
					SelectedChartType = LINE_CHART_LABEL;
					DrawDiagram();
				}
			}
		});	
	
		BarChartTypeBtn.addItemListener(new ItemListener() {
			
			@Override
			public void itemStateChanged(ItemEvent e) {
				// the state of the radio button has changed
				// let's re-draw the graph
				if(e.getStateChange() == ItemEvent.SELECTED) {
					SelectedChartType = BAR_CHART_LABEL;
					DrawDiagram();
				}
			}
		});	
	
		LineChartTypeBtn.setSelected(true);
		LineChartTypeBtn.setOpaque(false);
		LineChartTypeBtn.setVisible(true);
		
		BarChartTypeBtn.setVisible(true);
		BarChartTypeBtn.setOpaque(false);
		
		ChartTypesBtnGroup.add(LineChartTypeBtn);
		ChartTypesBtnGroup.add(BarChartTypeBtn);
		
	}
	
	//Creating a method to read a text file
	public void readFromFile() {
		final JFileChooser fc = new JFileChooser();

		// you can set the directory with the setCurrentDirectory method.
		int returnVal = fc.showOpenDialog(null);

		if (returnVal == JFileChooser.APPROVE_OPTION) {
			// User has selected to open the file.
			
			File file = fc.getSelectedFile();
			
			try {
				// Open the selected file
				BufferedReader reader = new BufferedReader(new FileReader(file));
				

				// Output the contents to the console.
				String nextLine = reader.readLine();
				 lineValue = "";
				//Scanner Scan = new Scanner(file);
				int linePosition = 0;
				
				
				
				while ( nextLine != null ) {
					linePosition = linePosition + 1;
					
					switch(linePosition) {
						case 1: // Title
							// extract the chart title by replacing Title: with an empty string
							lineValue = nextLine.replace("Title:", ""); 
							if(nextLine.startsWith("Title:") && IsNotEmpty(lineValue)) {
								// we have a valid non empty title
								chartTitle = lineValue; 
								textarea.append(nextLine + "\n");
							}
							else {
								// Input file has no valid title
								// let's display an error message to the user
								JOptionPane.showMessageDialog(null, "Please specify a chart title in your input file");
								break;
							}
							break;
						case 2: // YLabel
							// extract the value of yLabel
							lineValue = nextLine.replace("YLabel:", "");
							if(nextLine.startsWith("YLabel:") && IsNotEmpty(lineValue)) {
								yLabel = lineValue;
								textarea.append(nextLine + "\n");
							}
							else {
								JOptionPane.showMessageDialog(null, "Please specify a label for the Y axis in your input file");
								break;
							}					
							break;
						case 3: // XLabel
							lineValue = nextLine.replace("XLabel:", "");
							if(nextLine.startsWith("XLabel:") && IsNotEmpty(lineValue)) {
								xLabel = lineValue;
								textarea.append(nextLine + "\n");
							}
							else {
								JOptionPane.showMessageDialog(null, "Please specify a label for the X axis in your input file");
								break;
							}
							break;
						case 4: // XStart
							lineValue = nextLine.replace("XStart:", "").trim();
							if(nextLine.startsWith("XStart:") && IsValidFloat(lineValue)) {
								xStart = ParseFloat(lineValue);
								if(xStart >= 0) {
									textarea.append(nextLine + "\n");
								}
								else {
									JOptionPane.showMessageDialog(null, "xStart cannot be less than zero");
									break;
								}
							}
							else {
								JOptionPane.showMessageDialog(null, "Please specify a valid number for x start in your input file");
								break;
							}
							break;
						case 5: // XInterval
							lineValue = nextLine.replace("XInterval:", "").trim();
							if(nextLine.startsWith("XInterval:") && IsValidFloat(lineValue)) {
								xInterval = ParseFloat(lineValue);
								if(xInterval > 0) {
									textarea.append(nextLine + "\n");
								}
								else {
									JOptionPane.showMessageDialog(null, "xInterval cannot be less than zero");
									break;
								}
							}
							else {
								JOptionPane.showMessageDialog(null, "Please specify a valid number for xInterval in your input file");
								break;
							}
							break;
						case 6: // Data
								if(IsNotEmpty(nextLine)) {
									 dataParts = nextLine.split(",");
									chartData = new float[dataParts.length];
									
									for(int i = 0; i < dataParts.length; i++) {
										lineValue = dataParts[i].trim();
										if(IsValidFloat(lineValue)) {
											chartData[i] = ParseFloat(dataParts[i]);
										}
										
										else {
											JOptionPane.showMessageDialog(null, "The value "  + lineValue + " is not a valid data point");
											break;
										}
										
									}
								}
								else {
									JOptionPane.showMessageDialog(null, "Not data specified");
									break;
								}
							break;
	
					}
					
					nextLine = reader.readLine();
				}
				
				reader.close();

			} catch (IOException e) {
				
				System.err.println("Error while reading the file");
			} 
		}

	}
	
	public void DrawDiagram() {
		gpanel.removeAll();
		
		// let's pick the diagram class to add to panel
		// based on what chart type was selected
		if(SelectedChartType == LINE_CHART_LABEL)
			gpanel.add(new GraphDiagram());
		else if(SelectedChartType == BAR_CHART_LABEL)
			gpanel.add(new BarGraph());
		
		gpanel.revalidate();
		gpanel.repaint();
		
		chartLoaded = true;
	 }
	
	public void SaveChart() throws IOException {
		if(!chartLoaded) {
			JOptionPane.showMessageDialog(null, "No chart was loaded! Please load a chart first before saving it");
			return;
		}
		
		final JFileChooser fc = new JFileChooser();
		int returnCode = fc.showSaveDialog(null);
		if(returnCode == JFileChooser.APPROVE_OPTION) {
			File file = fc.getSelectedFile();
			
			if(file.getName().isEmpty()) {
				JOptionPane.showMessageDialog(null, "Invalid file name");
			}
			
			if(file.exists())
				file.delete();
			
			BufferedImage im = new BufferedImage(gpanel.getWidth(), gpanel.getHeight(), BufferedImage.TYPE_INT_ARGB);
			gpanel.paint(im.getGraphics());
			ImageIO.write(im, "PNG", file);
			
			JOptionPane.showMessageDialog(null, "Chart saved at " + file.getAbsolutePath());
		}
	}
	
	public boolean IsNotEmpty(String value) {
		if(value != null && value.isEmpty()) {
			return false;
		}
		else {
			return true;
		}
	}
	
	public boolean IsValidInteger(String value) {
		try {
			Integer.parseInt(value.trim());
			return true;
		}
		catch(NumberFormatException ex) {
			return false;
		}
	}
	
	public int ParseInt(String intStr) {
		return Integer.parseInt(intStr);
	}
	
	public float ParseFloat(String floatStr) {
		return Float.parseFloat(floatStr);
	}
	
	public boolean IsValidFloat(String value) {
		try {
			Float.parseFloat(value.trim());
			return true;
		}
		catch(NumberFormatException ex) {
			return false;
		}
	}
}


