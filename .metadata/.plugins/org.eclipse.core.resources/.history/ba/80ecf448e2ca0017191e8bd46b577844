
import java.util.List;

import javax.swing.JFrame;
import javax.swing.JPanel;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.util.ArrayList;




/**
 * A simple example of a JPanel that draws a graph.
 * 
 * @author mdixon
 */
@SuppressWarnings("serial")
public class GraphDiagram extends JPanel {

	public GraphDiagram() {

		setPreferredSize(new Dimension(600, 300));
		setBackground(Color.WHITE);
	}


	/**
	 * A method that draws a simple graph using the given array of Y values
	 * 
	 * @param g the Graphics object used for drawing.
	 * @param axisData the array of yCoordinates
	 */
	public void drawGraph(Graphics g, float[] axisData) {

		g.setColor(Color.BLUE);

		// get height of the panel (so we can calculate Y position relative to bottom of the panel).
		int height = getHeight();
		
		int x = 20;		// start x point (left of panel) 

		// previous coord positions.
		int prevX = x;
		int prevY = (int) axisData[0];

		for (float y : axisData ) {
			// draw a line from previous position, to next x,y position.
			g.drawLine(prevX, height - prevY, x, height -(int) y);

			// store previous coord for next iteration of the loop.
			prevX = x;
			prevY =(int) y;

			// add an increment to the X pos.
			x = x + 50;	
		}
	}


	@Override
	public void paintComponent(Graphics g) {
		// This is called when the panel needs to be drawn to the screen
		
		try {
		// do default painting first (fills the background etc.)
		super.paintComponent(g);
		List<String> list = new ArrayList<String>();
		
		float chartData2 ;
		float[] axisData = null;
		
		// draw a title string
		g.drawString("A graph", 250 ,20);
		for(int i = 0; i < Mysplitpane.dataParts.length; i++) {
			System.out.println(Mysplitpane.chartData[i] + "arrays");
			String nextVal = Mysplitpane.dataParts[i];
			
			list.add(nextVal);
		
				
			}
		float[] graphValues = new float[list.size()];
		for(int x = 0;x <list.size(); x++) {
			graphValues[x] = Float.parseFloat(list.get(x));
			
		}
		Mysplitpane.chartData = new float[Mysplitpane.dataParts.length];
		for(int i = 0; i < Mysplitpane.dataParts.length; i++) {
			Mysplitpane.lineValue = Mysplitpane.dataParts[i].trim();
			if(IsValidFloat(Mysplitpane.lineValue)) {
				axisData[i] = ParseFloat(Mysplitpane.dataParts[i]);
				
			}
			int yCoords[] = { 10, 40, 50, 80, 100, 150, 100, 90, 180, 170, 50 };

			// call the method that draws the graph.
			drawGraph(g, graphValues);
		}}
		catch(NullPointerException e) {
			
		}
			}
		// define an array of Y coordinates - these would normally be stored in an attribute (possibly once read from a file). 
	
	
	public boolean IsValidFloat(String value) {
		try {
			Float.parseFloat(value.trim());
			return true;
		}
		catch(NumberFormatException ex) {
			return false;
		}
	}
	public float ParseFloat(String floatStr) {
		return Float.parseFloat(floatStr);
	}
	
	
	//-----------------------------------------------------------------
	//  Displays the main frame of the program.
	//-----------------------------------------------------------------
	public static void main(String[] args) {

		JFrame frame = new JFrame("A graphics program");
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

		frame.getContentPane().add(new GraphDiagram());

		frame.pack();
		frame.setVisible(true);
	}
}